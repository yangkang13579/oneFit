<style lang="less">
.container {
  position: relative;
}
.weui-uploader__file {
  position: relative;
}
/** 遮罩 */
.weui-uploader__file-content {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: #cccccc;
  opacity: 0.5;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  color: #ffffff;
}
</style>

<template>
  <view class="container flex">
     <view class="weui-cells">
            <view class="weui-cell">
                <view class="weui-cell__bd">
                    <view class="weui-uploader">
                        <view class="weui-uploader__hd">
                            <view class="weui-uploader__title">图片上传</view>
                            <view class="weui-uploader__info">{{uploadItems.length}}/2</view>
                        </view>
                        <view class="weui-uploader__bd">
                            <view class="weui-uploader__files" id="uploaderFiles">
                                <block wx:for="{{uploadItems}}" wx:key="index">
                                    <view class="weui-uploader__file" @tap="previewImage" id="{{item.index}}">
                                        <image class="weui-uploader__img" src="{{item.file}}" mode="aspectFill" />
                                        <view class="weui-uploader__file-content">
                                            <view wx:if="{{!item.uploaded}}" class="weui-uploader__file-content_progress">{{item.progress}}%</view>
                                            <icon wx:if="{{item.uploadError}}" type="warn" size="23" color="#F43530"></icon>
                                        </view>
                                    </view>
                                </block>
                            </view>
                            <view class="weui-uploader__input-box">
                                <view class="weui-uploader__input" @tap="chooseImage"></view>
                            </view>
                        </view>
                    </view>
                </view>
            </view>
        </view>
  </view>
</template>

<script>
/* global wx */
import wepy from 'wepy';
import PageMixin from '../mixins/page';
export default class Upload extends wepy.page {
    config = {
        navigationBarTitleText: '测试上传图片'
    };
    mixins = [PageMixin];
    data = {
        uploadIndex: 0, // 上传的编号
        uploadItems: [], // 上传的图片数组
        uploading: false // 是否正在上传
    };
    methods = {
        chooseImage(e) {
            var self = this;
            wx.chooseImage({
                count: 2,
                sizeType: ['original', 'compressed'],
                sourceType: ['album', 'camera'],
                success(res) {
                    // tempFilePath可以作为img标签的src属性显示图片
                    const tempFilePaths = res.tempFilePaths;
                    for (var i = 0; i < tempFilePaths.length; i++) {
                        self.uploadItems.push({
                            index: self.uploadIndex++,
                            file: tempFilePaths[i], // 用于直接显示
                            progress: 0,
                            uploaded: false, // 是否上传完成
                            uploadError: false, // 上传失败
                            url: '' // 上传后的URL
                        });
                    }
                    self.startUpload();
                    self.$apply();
                },
                fail(error) {
                    console.log('upload failed:', error);
                }
            });
        },
        previewImage(e) {
            //
            //
        }
    };
    // 启动上传，一个一个上传，
    startUpload() {
        var self = this;
        if (self.uploading) {
            console.log('uploading...');
            return;
        }
        var uploadItem = null;
        for (var i = 0; i < self.uploadItems.length; i++) {
            var item = self.uploadItems[i];
            if (item.progress == 0) {
                uploadItem = item;
                break;
            }
        }
        if (uploadItem != null) {
            self.uploading = true;
            self
                .uploadFile(uploadItem, function(uploadItem) {
                    self.$apply();
                })
                .then(data => {
                    self.uploading = false;
                    uploadItem.uploaded = true; // 标记上传成功
                    // uploadItem.imageUrl 就是上传后的值
                    self.$apply();
                    self.startUpload();
                })
                .catch(e => {
                    uploadItem.uploadError = e.message;
                    self.uploading = false;
                    self.$apply();
                    self.startUpload();
                });

            /** 新的 generator 写法
            this.app
                .uploadFile(uploadItem, function(uploadItem) {
                    self.$apply();
                })
                .then(data => {
                    self.uploading = false;
                    uploadItem.uploaded = true; //标记上传成功
                    //uploadItem.imageUrl 就是上传后的值
                    self.$apply();
                   // self.startUpload();
                })
                .catch(e => {
                    uploadItem.uploadError = e.message;
                    self.uploading = false;
                    self.$apply();
                   // self.startUpload();
                });
             */
        }
    }
    // -------------  与上传服务器进行交互 -----------
    /* 传统模式promise 写法 */
    uploadFile(uploadItem, listener) {
        var self = this;
        console.log('startUpload:', uploadItem.index);
        return new Promise((resolve, reject) => {
            self
                ._newUpload()
                .then(data => {
                    console.log('newUpload:', data);
                    uploadItem.uploadToken = data.token;
                    uploadItem.uploadUrl = data.uploadUrl;
                    return self._uploadFile(uploadItem, listener);
                })
                .then(data => {
                    return self._uploadQueryCheck(uploadItem, listener);
                })
                .then(data => {
                    return self._uploadQueryResult(uploadItem);
                })
                .then(data => {
                    console.log('上传结束:', data);
                    // 上传结束
                    if (data.files && data.files.length > 0) {
                        var imageUrl = data.files[0].images[0].url;
                        console.log('上传结果:' + imageUrl);
                        uploadItem.imageUrl = imageUrl;
                        resolve(uploadItem);
                    }
                })
                .catch(error => {
                    console.log('上传失败:', error);
                });
            //
        });
    }
    // 获得一个上传地址
    // https://staticservice.extremevalue.cn/upload.html?appId=qjd
    _newUpload() {
        var self = this;
        return new Promise((resolve, reject) => {
            var uploadUrl = self.config.uploadUrl + 'upload.do';
            wx.request({
                url: uploadUrl,
                method: 'get',
                data: {
                    action: 'upload',
                    type: 'image',
                    appId: self.config.uploadAppId
                },
                success(res) {
                    var json = res.data;
                    console.log('json', json);
                    if (json.code == 200) {
                        resolve(json.messages.data);
                    } else {
                        const error = json.messages.error;
                        var e = new Error(error.message);
                        e.name = error.code;
                        reject(e);
                    }
                },
                fail(res) {
                    var error = {
                        code: 'upload_error',
                        message: res.errMsg
                    };
                    var e = new Error(error.message);
                    e.name = error.code;
                    reject(e);
                }
            });
        });
    }
    // 上传文件的具体
    _uploadFile(uploadItem, listener) {
        var self = this;
        return new Promise((resolve, reject) => {
            const uploadTask = wx.uploadFile({
                url: uploadItem.uploadUrl,
                filePath: uploadItem.file,
                name: 'file',
                success(res) {
                    if (res.statusCode != 200) {
                        var error = {
                            code: 'upload_error',
                            message: 'HTTP错误:' + res.statusCode
                        };
                        var e = new Error(error.message);
                        e.name = error.code;
                        reject(e);
                    } else {
                        resolve(uploadItem);
                    }
                },
                fail(res) {
                    var error = {
                        code: 'upload_error',
                        message: res.errMsg
                    };
                    var e = new Error(error.message);
                    e.name = error.code;
                    reject(e);
                }
            });
            // 监控上传进度
            uploadTask.onProgressUpdate(res => {
                if (listener != null) {
                    uploadItem.progress = res.progress;
                    if (uploadItem.progress > 99) {
                        uploadItem.progress = 99;
                    }
                    listener(self, uploadItem);
                }

                console.log('上传进度', res.progress);

                // console.log('已经上传的数据长度', res.totalBytesSent);
                console.log(
                    '预期需要上传的数据总长度',
                    res.totalBytesExpectedToSend
                );

            });
        });
    }
    // 确认服务器已经收到所有数据
    _uploadQueryCheck(uploadItem, listener) {
        var uploadUrl = uploadItem.uploadUrl;
        function checkFinished(resolve, reject) {
            wx.request({
                url: uploadUrl,
                method: 'get',
                success: function (res) {
                    var data = res.data;
                    console.log('check upload finished:', data);
                    if (data.status === 'finish') {
                        if (listener != null) {
                            uploadItem.progress = 100;
                            listener(uploadItem);
                        }
                        resolve(data);
                    } else {
                        setTimeout(function () {
                            checkFinished(resolve, reject);
                        }, 1000);
                    }
                },
                fail: function (res) {
                    var error = {
                        code: 'upload_error',
                        message: res.errMsg
                    };
                    console.log('query server error,will retry:', error);
                    setTimeout(function () {
                        checkFinished(resolve, reject);
                    }, 1000);
                }
            });
        };
        return new Promise((resolve, reject) => {
            checkFinished(resolve, reject);
        });
    }
    _uploadQueryResult(uploadItem) {
        var self = this;
        return new Promise((resolve, reject) => {
            var uploadUrl = self.config.uploadUrl + 'upload.do';
            wx.request({
                url: uploadUrl,
                method: 'get',
                data: {
                    action: 'query',
                    token: uploadItem.uploadToken
                },
                success: function (res) {
                    var json = res.data;
                    if (json.code === 200) {
                        resolve(json.messages.data);
                    } else {
                        const error = json.messages.error;
                        var e = new Error(error.message);
                        e.name = error.code;
                        reject(e);
                    }
                },
                fail: function (res) {
                    var error = {
                        code: 'upload_error',
                        message: res.errMsg
                    };
                    var e = new Error(error.message);
                    e.name = error.code;
                    reject(e);
                }
            });
        });
    }
}
</script>
