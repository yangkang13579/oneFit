<style lang="less">
  .wrap {
    top:0;
    left:0;
    z-index: 2;
    position: relative;
  }
  .bg{
    height: 100%;
    width: 100%;
    background-image: linear-gradient(#23A7A2, #0D7FC6);
    position: fixed;
    top:0;
    left:0;
  }
  .input-wrap {
    font-size:30rpx;
    padding:40rpx 30rpx 0 30rpx;
    p{
      color: #fff;
    }
    input{
      margin-top: 20rpx;
      width:650rpx;
      padding:0 20rpx;
      line-height: 70rpx;
      font-size: 30rpx;
      color: #333;
      border-radius: 10rpx;
      height: 70rpx;
      background: #fff;
    }
    .smallview{
      display: flex;
      align-items: center;
    }
    .small{
       width:320rpx;
      input, picker{
        width:290rpx;
      }
    }
    .small:nth-of-type(2) {
      margin-left: 30rpx;
    }
  }
  .input-wrap:last-child {
    border: none;
  }
  .input-wrap text {
    height: 90rpx;
    line-height: 90rpx;
    color: #666;
    padding-left: 20rpx;
  }
  .arrow {
    margin-top: 30rpx;
    margin-right: 20rpx;
  }
  .save-btn {
    font-size:30rpx;
    margin-left: 30rpx;
    margin-top:80rpx;
    width: 690rpx;
    height: 90rpx;
    line-height: 90rpx;
    background: #0970AC;
    color: #fff;
    margin-bottom: 80rpx;
  }
</style>


<template lang="wxml">
  <!--编辑栏-->
  <view>
    <view class='bg'></view>
  <view class="wrap">
    <view class="input-wrap name">
      <p>会议名称<em> (必填)</em></p>
      <input placeholder-style="color: #ccc"  bindblur="getName" bindconfirm="getName" value="{{formData.name ? formData.name : ''}}" />
    </view>
    <view class="input-wrap mobile">
      <p>会议类别<em> (必填)</em></p>
      <view >
        <view class="times-picker">
          <picker mode="selector" bindchange="changeClassify" range="{{classifyAry}}">
            <input value="{{classifyAry[formData.classify]}}" disabled/>
          </picker>
        </view>
      </view>
    </view>
    <view class="input-wrap name">
      <p>内容简介<em class='blue'> (选填)</em></p>
      <input placeholder-style="color: #ccc" bindblur="getContent" bindconfirm="getContent" value="{{formData.content ? formData.content : ''}}" />
    </view>
    <view class="input-wrap name">
      <p>会议负责人<em> (必填)</em></p>
      <input placeholder-style="color: #ccc" bindblur="getleader" bindconfirm="getleader" value="{{formData.leader ? formData.leader : ''}}" />
    </view>
    <view class="input-wrap name">
      <p>会议地址<em> (必填)</em></p>
      <view >
        <view class="times-picker" style='position:relative'>
          <picker  mode="region" style='width:400rpx' value='{{address}}' bindchange="bindRegionChange">
            <input style='width: 431rpx;' value="{{address}}" disabled/>
          </picker>
           <button class="save-btn" 
           style='width: 200rpx;position: absolute;right: 0;top: 0;margin-top: 0;height: 70rpx;line-height: 70rpx;' 
          @tap="chooseLocation">选择位置</button>
        </view>
      </view>
     
    </view>
    <view class="input-wrap name">
      <p>详细地址<em>(必填) </em></p>
      <input placeholder-style="color: #ccc" bindblur="getaddress" bindconfirm="getaddress" value="{{formData.address ? formData.address : ''}}" />
    </view>
    <view class="input-wrap name">
      <p>容纳人数<em class='blue'> (选填)</em></p>
      <input placeholder-style="color: #ccc" bindblur="getuserCount" type='tel' bindconfirm="getuserCount" value="{{formData.userCapacity ? formData.userCapacity : ''}}" />
    </view>
     <view class="input-wrap mobile">
      <p>会议有效时间段<em> (必填)</em></p>
      <view class='smallview'>
        <view class="times-picker small">
          <picker mode="multiSelector" bindchange="bindStartChange" bindcolumnchange="bindMultiPickerColumnChange" value="{{multiIndex}}" range="{{multiArray}}">
            <input value="{{formData.startDate1 ? formData.startDate1 + '分' : ''}}" disabled/>
          </picker>
        </view>

        <view class="times-picker small">
          <picker mode="multiSelector" bindchange="bindEndChange" bindcolumnchange="bindMultiPickerColumnChange" value="{{multiIndex}}" range="{{multiArray}}">
            <input value="{{formData.endDate1 ? formData.endDate1 + '分' : ''}}" disabled/>
          </picker>
        </view>
        <!-- <reportendtimescomp class='small'></reportendtimescomp> -->
      </view>
    </view>
    <!-- <view class="input-wrap name">
      <p>作物类别<em class='blue'> (选填)</em></p>
      <input placeholder-style="color: #ccc" bindblur="getName" bindconfirm="getName" value="{{name ? name : ''}}" />
    </view> -->
    <button class="save-btn" @tap="save">{{type === 'edit' ? '编辑' : '提交'}}</button>
    </view>
  </view>
  <!--保存-->
 

</template>


<script>
  import wepy from 'wepy';
  import PageMixin from '../mixins/page';
  export default class EditAddress extends wepy.page {
    mixins = [PageMixin];
    config = {
        navigationBarTitleText: '创建会议',
        navigationBarBackgroundColor: '#fff'
    };
    data = {
        classifyAry: [
            '经销商会',
            '农民会',
            '观摩会',
            '促销会',
            '其他会议'
        ],
        type: null,
        formData: {},
        date: '2016-09-01',
        times: '2020-07-29 12:50',
        // 时间选择器参数
        years: [],
        months: [],
        days: [],
        hours: [],
        minutes: [],
        second: [],
        multiArray: [], // 选择范围
        multiIndex: [0, 9, 16, 13, 17], // 选中值数组
        choose_year: '',
        yearIndex: 0,
        address: []
    };
    // 差一位补位
    timesFun (t) {
        if (t < 10) return '0' + t;
        else return t;
    }
    // 设置初始值
    settimesDate() {
        const date = new Date();
        let _yearIndex = 0;
        // 默认设置
        console.info(this.times);
        let _defaultYear = this.times ? this.times.split('-')[0] : 0;
        // 获取年
        for (let i = date.getFullYear(); i <= date.getFullYear() + 5; i++) {
            this.years.push('' + i);
            // 默认设置的年的位置
            if (_defaultYear && i === parseInt(_defaultYear)) {
                this.yearIndex = _yearIndex;
                this.choose_year = _defaultYear;
            }
            _yearIndex = _yearIndex + 1;
        }
        // 获取月份
        for (let i = 1; i <= 12; i++) {
            if (i < 10) {
                i = '0' + i;
            }
            this.months.push('' + i);
        }
        // 获取日期
        for (let i = 1; i <= 31; i++) {
            if (i < 10) {
                i = '0' + i;
            }
            this.days.push('' + i);
        }
        // // 获取小时
        for (let i = 0; i < 24; i++) {
            if (i < 10) {
                i = '0' + i;
            }
            this.hours.push('' + i);
        }
        // // 获取分钟
        for (let i = 0; i < 60; i++) {
            if (i < 10) {
                i = '0' + i;
            }
            this.minutes.push('' + i);
        }
        // // 获取秒数
        // for (let i = 0; i < 60; i++) {
        //   if (i < 10) {
        //     i = '0' + i
        //   }
        //   this.second.push('' + i)
        // }
    }
    // 返回月份的天数
    setDays(selectYear, selectMonth) {
        let num = selectMonth;
        let temp = [];
        if (num === 1 || num === 3 || num === 5 || num === 7 || num === 8 || num === 10 || num === 12) {
            // 判断31天的月份
            for (let i = 1; i <= 31; i++) {
                if (i < 10) {
                    i = '0' + i;
                }
                temp.push('' + i);
            }
        } else if (num === 4 || num === 6 || num === 9 || num === 11) { // 判断30天的月份
            for (let i = 1; i <= 30; i++) {
                if (i < 10) {
                    i = '0' + i;
                }
                temp.push('' + i);
            }
        } else if (num === 2) { // 判断2月份天数
            let year = parseInt(selectYear);
            console.log(year);
            if (((year % 400 === 0) || (year % 100 !== 0)) && (year % 4 === 0)) {
                for (let i = 1; i <= 29; i++) {
                    if (i < 10) {
                        i = '0' + i;
                    }
                    temp.push('' + i);
                }
            } else {
                for (let i = 1; i <= 28; i++) {
                    if (i < 10) {
                        i = '0' + i;
                    }
                    temp.push('' + i);
                }
            }
        }
        return temp;
    }
    // 设置默认值 格式2019-07-10 10:30
    setDefaulttimes() {
        let allDateList = this.times.split(' ');
        // 日期
        let dateList = allDateList[0].split('-');
        let month = parseInt(dateList[1]) - 1;
        let day = parseInt(dateList[2]) - 1;
        // 时间
        let timesList = allDateList[1].split(':');
        this.multiArray[2] = this.setDays(dateList[0], parseInt(dateList[1]));
        this.multiIndex = [this.yearIndex, month, day, timesList[0], timesList[1]];
    }
    // 获取时间日期
    PickerChange(e) {
        // console.log('picker发送选择改变，携带值为', e.detail.value)
        this.multiIndex = e.detail.value;
        const index = this.multiIndex;
        const year = this.multiArray[0][index[0]];
        const month = this.multiArray[1][index[1]];
        const day = this.multiArray[2][index[2]];
        const hour = this.multiArray[3][index[3]];
        const minute = this.multiArray[4][index[4]];
        // const second = this.multiArray[5][index[5]]
        // console.log(`${year}-${month}-${day}-${hour}-${minute}`);
        this.times = year + '-' + month + '-' + day + ' ' + hour + ':' + minute;
        this.$apply();
        return this.times;
    }
    methods = {
        chooseLocation () {
            var that = this;
            wx.getLocation({
                type: 'wgs84',
                success (res) {
                    wx.chooseLocation({
                        latitude: res.latitude,
                        longitude: res.longitude,
                        success (rest) {
                            // 发送请求通过经纬度反查地址信息
                            that.fetchDataPromise('resolveLocationApi.json', {latitude: rest.latitude, longitude: rest.longitude})
                                .then(function(data) {
                                    that.address = [data.provinceName, data.cityName, data.districtName];
                                    that.formData.address = data.address;
                                });
                        }
                    });
                }
            });
  
        },
        bindRegionChange (e) {
            this.address = e.detail.value;
            this.formData.address = '';
        },
        changeClassify (e) {
            console.log(e);
            this.formData.classify = e.detail.value;
        },
        // 监听picker的滚动事件
        bindMultiPickerColumnChange(e) {
        // 获取年份
            if (e.detail.column === 0) {
                this.choose_year = this.multiArray[e.detail.column][e.detail.value];
                console.log(this.choose_year);
            }
            // console.log('修改的列为', e.detail.column, '，值为', e.detail.value);
            // 设置月份数组
            if (e.detail.column === 1) {
                let num = parseInt(this.multiArray[e.detail.column][e.detail.value]);
                this.multiArray[2] = this.setDays(this.choose_year, num);
            }

            this.multiIndex[e.detail.column] = e.detail.value;
            this.$apply();
        },
        bindStartChange (e) {
            this.formData.startDate1 = this.PickerChange(e);
        },
        bindEndChange (e) {
            this.formData.endDate1 = this.PickerChange(e);
        },
  
        // 获取时间
        gettimes (times) {
            console.log(times);
        },
        showAddrChose() { // 显示省市区联动选择框
            this.isShowAddressChose = !this.data.isShowAddressChose;
        },
        cancel() { // 取消
            this.isShowAddressChose = false;
        },
        finish() { // 完成
            this.isShowAddressChose = false;
        },
        getName(e) { // 获得会议名称
            this.formData.name = e.detail.value;
            this.$apply();
        },
        getContent(e) { // 获得全部内容
            this.formData.content = e.detail.value;
            this.$apply();
        },
        getleader(e) { // 获得领导
            this.formData.leader = e.detail.value;
            this.$apply();
        },
        getaddress(e) { // 获得领导
            this.formData.address = e.detail.value;
            this.$apply();
        },
        getuserCount(e) { // 获得领导
            this.formData.userCapacity = e.detail.value;
            this.$apply();
        },
        save() { // 保存
            var self = this;
            console.log(this.formData);
            if (!self.formData.name || self.formData.name == '') {
                wx.showModal({
                    title: '提示',
                    content: '会议名称必填',
                    showCancel: false
                });
                return;
            } else if (!self.formData.leader || self.formData.leader == '') {
                wx.showModal({
                    title: '提示',
                    content: '负责人必填',
                    showCancel: false
                });
                return;
            } else if (!self.formData.classify || self.formData.classify == '') {
                wx.showModal({
                    title: '提示',
                    content: '会议类别必填',
                    showCancel: false
                });
                return;
            } else if (!self.address || self.address == '' || self.address.length === 0) {
                wx.showModal({
                    title: '提示',
                    content: '请选择地址',
                    showCancel: false
                });
                return;
            } else if (!self.formData.address || self.formData.address == '') {
                wx.showModal({
                    title: '提示',
                    content: '详细地址必填',
                    showCancel: false
                });
                return;
            } else if (!self.formData.name || self.formData.name == '') {
                wx.showModal({
                    title: '提示',
                    content: '会议名称必填',
                    showCancel: false
                });
                return;
            } else if (!self.formData.name || self.formData.name == '') {
                wx.showModal({
                    title: '提示',
                    content: '会议名称必填',
                    showCancel: false
                });
                return;
            }
            this.formData.meetingType = this.classifyAry[this.formData.classify];
            this.formData.provinceName = this.address[0];
            this.formData.cityName = this.address[1];
            this.formData.districtName = this.address[2];
            this.formData.startDate = this.formData.startDate1 + ':00';
            this.formData.endDate = this.formData.endDate1 + ':59';
            if (self.type == 'edit') {
                this.formData.user = null;
                this.fetchDataPromise('meeting/wechat/updateMeetingApi.json', this.formData)
                    .then(function(data) {
                        self.formData = {};
                        // 返回上一页
                        wx.navigateBack({
                            delta: 1
                        });
                        self.$apply();
                    });
            } else {
                this.fetchDataPromise('meeting/wechat/createMeetingApi.json', this.formData)
                    .then(function(data) {
                        self.formData = {};
                        // 返回上一页
                        wx.navigateBack({
                            delta: 1
                        });
                        self.$apply();
                    });
            }
        },
    }
    // endFun () {
    //   if (this.formData.endDate1) this.times = this.formData.endDate1
    // }
    // startDate () {
    //   if (this.formData.startDate1) this.times = this.formData.startDate1
    // }
    onLoad(options) {
        // 获取经纬度
        this.times = new Date().getFullYear() + '-' + this.timesFun(new Date().getMonth() + 1) + '-' + this.timesFun(new Date().getDate()) + ' ' + '12';
        var that = this;
        if (options.item) {
            wx.setNavigationBarTitle({
                title: '编辑会议'
            });
            that.type = 'edit';
            this.formData = JSON.parse(options.item);
            this.formData.startDate1 = this.formData.startDate1.split(' ')[0] + ' ' + this.formData.startDate1.split(' ')[1].split(':')[0];
            this.formData.endDate1 = this.formData.endDate1.split(' ')[0] + ' ' + this.formData.startDate1.split(' ')[1].split(':')[0];
            this.times = this.formData.startDate1;
        }

        wx.getLocation({
            type: 'gcj02',
            success: function (res) {
                console.log(res);
  
                that.formData.latitude = res.latitude;
                that.formData.longitude = res.longitude;
            },
            fail: function (res) {
                console.log(res);
            }
        });
        this.settimesDate();
        // this.multiArray = [this.years, this.months, this.days, this.hours, this.minutes, this.second]
        this.multiArray = [this.years, this.months, this.days, this.hours, this.minutes];
        // this.multiArray = [this.years, this.months, this.days, this.hours]
        // this.multiArray = [this.years, this.months, this.days]
        this.choose_year = this.multiArray[0][0];
        if (!this.times) {
        // 默认显示当前日期
            let date = new Date();
            let currentMonth = date.getMonth();
            let currentDay = date.getDate() - 1;
            // console.info('月', date.getMonth())
            // console.info('日', date.getDate())
            this.multiArray[2] = this.setDays(this.choose_year, currentMonth + 1);
            this.multiIndex = [0, currentMonth, currentDay, 10, 0];
        } else {
            this.setDefaulttimes();
        }
        // wx.getStorage({
        //   key: 'item',
        //   success (res) {
        //     console.log(res.data)
        //     self.formData = res.data
        //   }
        // })

        this.$apply();
    }
    whenAppReadyShow() {
        // 每次都刷新
        this.$apply();
    }
    changeCurrentData(option) { // 改变当前数据
        // 全国数据
        var nationalData = this.nationalData;
        // 所有省
        if (this.provinces.length == 0) {
            var provinces = this.data.provinces;
            for (var i = 0; i < nationalData.length; i++) {
                provinces.push({
                    index: i,
                    province: nationalData[i].zone_name
                });
            }
            this.provinces = provinces;
        }
        // 当前所有市
        if (option.type == 'city' || option.type == 'all') {
        // 清空市数据
            this.cities = [];
            var cities = this.cities;
            var currentCities = nationalData[option.currentProvinceIndex].citys;
            for (var i = 0; i < currentCities.length; i++) {
                cities.push({
                    index: i,
                    city: currentCities[i].zone_name
                });
            }
            this.cities = cities;
        }
        // 当前所有区
        // 清空 区 数据
        this.districts = [];
        var districts = this.districts;
        var currentDistricts = nationalData[option.currentProvinceIndex].citys[option.currentCityIndex].districts;
        for (var i = 0; i < currentDistricts.length; i++) {
            if (i != 0) {
                districts.push(currentDistricts[i].zone_name);
            };
        }
        this.districts = districts;
        this.$apply();
    }
  }
</script>
