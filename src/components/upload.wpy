<style lang="less">
.weui-cell, .weui-cells{
  border-radius: 10rpx;
  background: 0;
}
.weui-cells{
  margin-top:10rpx;
}
.weui-cell{
  width: 690rpx;
  background: #fff;
  padding:30rpx 0;
}
.container {
  position: relative;
}
.weui-uploader__file {
  position: relative;
  margin-left: 20rpx;
  margin-bottom: 50rpx;
}
/** 遮罩 */
.weui-uploader__file-content {
  position: absolute;
  width: 20rpx;
  height: 20rpx;
  right: 0;
  bottom: 0;
  background: 0;
  opacity: 1;
  image{
   width: 40rpx;
  height: 40rpx;
  position: absolute;
  bottom: -37px;

  }
}
.weui-uploader__input-box{
  width: 92rpx;
  height: 92rpx;
  border:0;
  image{
    width: 92rpx;
    height: 92rpx;
    margin-left:20rpx;
  }
}
.weui-cells:before{
  border-top:0;
}
.weui-uploader__input {
  position: relative;
  opacity: 1;
}
.weui-cells:after{
  border-bottom: 0;
}
.weui-uploader__img{
  width: 92rpx;
  height: 92rpx;
}
.weui-uploader__input-box:before, .weui-uploader__input-box:after{
  background: #fff !important;
}
</style>

<template>
     <view class="weui-cells">
        <view class="weui-cell">
            <view class="weui-cell__bd">
                <view class="weui-uploader">
                    <view class="weui-uploader__bd">
                        <view class="weui-uploader__files" id="uploaderFiles">
                            <block wx:for="{{uploadItems}}" wx:key="index" wx:for-index="idx">
                                <view class="weui-uploader__file" id="{{item.index}}">
                                    <image class="weui-uploader__img" src="{{item.file}}" @tap="preview" data-src="{{item.file}}" mode="aspectFill" />
                                    <view class="weui-uploader__file-content">
                                        <image src='../images/close.png' @tap="delImg" data-index="{{idx}}"/>
                                    </view>
                                </view>
                            </block>
                        </view>
                        <view class="weui-uploader__input-box">
                            <image class="weui-uploader__input" src="{{imgUpload}}" @tap="chooseImage" />
                        </view>
                    </view>
                </view>
            </view>
        </view>
    </view>
</template>

<script>
/* global wx */
import wepy from 'wepy';
import PageMixin from '../mixins/page';
export default class Upload extends wepy.page {
    config = {
        navigationBarTitleText: '测试上传图片'
    };
    mixins = [PageMixin];
    data = {
        uploadIndex: 0, //上传的编号
        imgUpload: '../images/btn_add_img.png',
        uploadItems: [], //上传的图片数组
        uploading: false //是否正在上传
    };
    events = { 
      'index-broadcast': (...args) => {
        console.log(args[0], 'args[0]')
        const item = args[0][0]
        this.uploadItems = [{imageUrl: item.img1, uploadUrl: item.img1, file: item.img1, uploaded: true}, {imageUrl: item.img2, file: item.img2, uploaded: true, uploadUrl: item.img2}, {imageUrl: item.img3, file: item.img3, uploaded: true, uploadUrl: item.img3}]
      }
    }
    methods = {
        delImg(e) {
          this.uploadItems.splice(e.currentTarget.dataset.index, 1)
        },
        preview(event) {
          let currentUrl = event.currentTarget.dataset.src
          wx.previewImage({
            current: currentUrl, // 当前显示图片的http链接
            urls: [currentUrl] // 需要预览的图片http链接列表
          })
        },
        chooseImage(e) {
            var self = this;
            wx.chooseImage({
                count: 3,
                sizeType: ['original', 'compressed'],
                sourceType: ['album', 'camera'],
                success(res) {
                    // tempFilePath可以作为img标签的src属性显示图片
                    const tempFilePaths = res.tempFilePaths;
                    for (var i = 0; i < tempFilePaths.length; i++) {
                        self.uploadItems.push({
                            index: self.uploadIndex++,
                            file: tempFilePaths[i], //用于直接显示
                            progress: 0,
                            uploaded: false, //是否上传完成
                            uploadError: false, //上传失败
                            url: '' //上传后的URL
                        });
                    }
                    self.startUpload();
                    self.$apply();
                },
                fail(error) {
                    console.log('upload failed:', error);
                }
            });
        },
        previewImage(e) {
            //
            //
        }
    };
    //启动上传，一个一个上传，
    startUpload() {
        var self = this;
        if (self.uploading) {
            console.log('uploading...');
            return;
        }
        var uploadItem = null;
        for (var i = 0; i < self.uploadItems.length; i++) {
            var item = self.uploadItems[i];
            if (item.progress == 0) {
                uploadItem = item;
                break;
            }
        }
        if (uploadItem != null) {
            self.uploading = true;
            self
                .uploadFile(uploadItem, function(uploadItem){
                    self.$apply();
                })
                .then(data => {
                    self.uploading = false;
                    uploadItem.uploaded = true; //标记上传成功
                    //uploadItem.imageUrl 就是上传后的值
                    self.$apply();
                    self.startUpload();
                })
                .catch(e => {
                    uploadItem.uploadError = e.message;
                    self.uploading = false;
                    self.$apply();
                    self.startUpload();
                });
           

           /** 新的 generator 写法
            this.app
                .uploadFile(uploadItem, function(uploadItem) {
                    self.$apply();
                })
                .then(data => {
                    self.uploading = false;
                    uploadItem.uploaded = true; //标记上传成功
                    //uploadItem.imageUrl 就是上传后的值
                    self.$apply();
                   // self.startUpload();
                })
                .catch(e => {
                    uploadItem.uploadError = e.message;
                    self.uploading = false;
                    self.$apply();
                   // self.startUpload();
                });
             */
        }
    }
    //-------------  与上传服务器进行交互 -----------
    /* 传统模式promise 写法 */
    uploadFile(uploadItem, listener) {
        var self = this;
        wx.showLoading({
          title: '上传中...'
        })
        console.log('startUpload:', uploadItem.index);
        return new Promise((resolve, reject) => {
            self
                ._newUpload()
                .then(data => {
                    console.log('newUpload:', data);
                    uploadItem.uploadToken = data.token;
                    uploadItem.uploadUrl = data.uploadUrl;
                    return self._uploadFile(uploadItem, listener);
                })
                .then(data => {
                    return self._uploadQueryCheck(uploadItem,listener);
                })
                .then(data => {
                    return self._uploadQueryResult(uploadItem);
                })
                .then(data => {
                     console.log('上传结束:', data);
                    //上传结束
                    if (data.files && data.files.length > 0) {
                        var imageUrl = data.files[0].images[0].url;
                        console.log('上传结果:' + imageUrl);
                        uploadItem.imageUrl = imageUrl;
                        resolve(uploadItem);
                        console.log(self.uploadItems, '33')
                        self.$emit('toParent1',self.uploadItems)
                        wx.hideLoading()
                    }
                })
                .catch(error => {
                    console.log('上传失败:', error);
                });
            //
        });
    }
    //获得一个上传地址
    //https://staticservice.extremevalue.cn/upload.html?appId=qjd
    _newUpload() {
        var self = this;
        return new Promise((resolve, reject) => {
            var uploadUrl = wx.getStorageSync('uploadUrl') + 'upload.do';
            wx.request({
                url: uploadUrl,
                method: 'get',
                data: {
                    action: 'upload',
                    type: 'image',
                    appId: wx.getStorageSync('uploadAppId')
                },
                success(res) {
                    var json = res.data;
                    console.log('json11111',json)
                    if (json.code == 200) {
                        resolve(json.messages.data);
                    } else {
                        const error = json.messages.error;
                        var e = new Error(error.message);
                        e.name = error.code;
                        reject(e);
                    }
                },
                fail(res) {
                    var error = {
                        code: 'upload_error',
                        message: res.errMsg
                    };
                    var e = new Error(error.message);
                    e.name = error.code;
                    reject(e);
                }
            });
        });
    }
    //上传文件的具体
    _uploadFile(uploadItem, listener) {
        var self = this;
        return new Promise((resolve, reject) => {
            const uploadTask = wx.uploadFile({
                url: uploadItem.uploadUrl,
                filePath: uploadItem.file,
                name: 'file',
                success(res) {
                    if (res.statusCode != 200) {
                        var error = {
                            code: 'upload_error',
                            message: 'HTTP错误:' + res.statusCode
                        };
                        var e = new Error(error.message);
                        e.name = error.code;
                        reject(e);
                    } else {
                        resolve(uploadItem);
                    }
                },
                fail(res) {
                    var error = {
                        code: 'upload_error',
                        message: res.errMsg
                    };
                    var e = new Error(error.message);
                    e.name = error.code;
                    reject(e);
                }
            });
            //监控上传进度
            uploadTask.onProgressUpdate(res => {
                if (listener != null) {
                    uploadItem.progress = res.progress;
                    if (uploadItem.progress > 99) {
            uploadItem.progress = 99;
          }
                    listener(self, uploadItem);
                }

            
            
            
    
                console.log('上传进度', res.progress);
                 
                //console.log('已经上传的数据长度', res.totalBytesSent);
                console.log(
                    '预期需要上传的数据总长度',
                    res.totalBytesExpectedToSend
                );
                
            });
        });
    }
    // 确认服务器已经收到所有数据
  _uploadQueryCheck(uploadItem,listener) {
    var uploadUrl = uploadItem.uploadUrl;
    function checkFinished(resolve, reject) {
      wx.request({
        url: uploadUrl,
        method: 'get',
        success: function (res) {
          var data = res.data;
          console.log("check upload finished:", data);
          if (data.status === 'finish') {
            if (listener != null) {
              uploadItem.progress = 100;
              listener(uploadItem);
            }
            resolve(data);
          } else {
            setTimeout(function () {
              checkFinished(resolve, reject);
            }, 1000);
          }
        },
        fail: function (res) {
          var error = {
            code: 'upload_error',
            message: res.errMsg
          };
          console.log("query server error,will retry:", error);
          setTimeout(function () {
            checkFinished(resolve, reject);
          }, 1000);
        }
      });
    };
    return new Promise((resolve, reject) => {
      checkFinished(resolve, reject);
    });
  }
  _uploadQueryResult(uploadItem) {
    var self = this;
    return new Promise((resolve, reject) => {
      var uploadUrl = wx.getStorageSync('uploadUrl') + 'upload.do';
      wx.request({
        url: uploadUrl,
        method: 'get',
        data: {
          action: 'query',
          token: uploadItem.uploadToken
        },
        success: function (res) {
          var json = res.data;
          if (json.code === 200) {
            resolve(json.messages.data);
          } else {
            const error = json.messages.error;
            var e = new Error(error.message);
            e.name = error.code;
            reject(e);
          }
        },
        fail: function (res) {
          var error = {
            code: 'upload_error',
            message: res.errMsg
          };
          var e = new Error(error.message);
          e.name = error.code;
          reject(e);
        }
      });
    });
  }
}
</script>
