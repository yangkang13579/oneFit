<style lang="less">
  .wrap {
    top:0;
    left:0;
    z-index: 2;
    position: relative;
  }
  .bg{
    height: 100%;
    width: 100%;
    background-image: linear-gradient(#23A7A2, #0D7FC6);
    position: fixed;
    top:0;
    left:0;
  }
  .input-wrap {
    font-size:30rpx;
    padding:40rpx 30rpx 0 30rpx;
    p{
      color: #fff;
    }
    input, picker{
      margin-top: 20rpx;
      width:650rpx;
      padding:0 20rpx;
      line-height: 70rpx;
      font-size: 30rpx;
      color: #333;
      border-radius: 10rpx;
      height: 70rpx;
      background: #fff;
    }
    textarea {
      margin-top: 20rpx;
      width: 650rpx;
      padding: 0 20rpx;
      line-height: 70rpx;
      font-size: 30rpx;
      color: #333;
      border-radius: 10rpx;
      height: 200rpx;
      background: #fff;
    }
    .smallview{
      display: flex;
      align-items: center;
    }
    .small{
       width:350rpx;
      input, picker{
        width:290rpx;
      }
    }
    .small:nth-of-type(2) {
      margin-left: 30rpx;
    }
  }
  .input-wrap:last-child {
    border: none;
  }
  .input-wrap text {
    height: 90rpx;
    line-height: 90rpx;
    color: #666;
    padding-left: 20rpx;
  }
  .arrow {
    margin-top: 30rpx;
    margin-right: 20rpx;
  }
  .save-btn {
    font-size:30rpx;
    margin-left: 30rpx;
    margin-top:80rpx;
    width: 690rpx;
    height: 90rpx;
    line-height: 90rpx;
    background: #0970AC;
    color: #fff;
    margin-bottom: 80rpx;
  }
  .goods {
    display: flex;
    position: relative;
    align-items: center;
    padding-top: -20rpx !important;
    padding-bottom: 0;
  }
  .goods input {
    margin: 0 20rpx;
  }
.toast {
  display: flex;
  align-items: center;
  position: fixed;
  top: 40%;
  justify-content: center;
  width: 100%;
  p {
    border-radius: 10rpx;
    background: rgba(0, 0, 0, 0.6);
    color: #fff;
    font-size: 30rpx;
    padding: 20rpx 30rpx;
  }
}
.del{
  margin-top: -60rpx;
  background: #C4C4C4;
}
</style>


<template lang="wxml">
  <!--编辑栏-->
  <view>
    <view class='bg'></view>
     <view class='toast' wx:if='{{showToast}}'><p>{{error}}</p></view>
    <view class="wrap">
      <view class="input-wrap name">
        <p>实验名称<em> (必填)</em></p>
        <input placeholder-style="color: #ccc"  bindblur="getName" bindconfirm="getName" value="{{formData.name ? formData.name : ''}}" />
      </view>
      <view class="input-wrap name">
        <p>实验负责人<em> (必填)</em></p>
        <input placeholder-style="color: #ccc"  bindblur="getleader" bindconfirm="getleader" value="{{formData.leader ? formData.leader : ''}}" />
      </view>
      <view class="input-wrap name">
        <p>手机号<em> (必填)</em></p>
        <input placeholder-style="color: #ccc"  bindblur="getmobile" bindconfirm="getmobile" value="{{formData.mobile ? formData.mobile : ''}}" />
      </view>
      <view class="input-wrap mobile">
        <p>实验类型<em> (必填)</em></p>
        <view >
          <view class="times-picker">
            <picker mode="selector" bindchange="changeClassify" range="{{classifyAry}}">
              <input  placeholder='请选择' value="{{classifyAry[formData.classify]}}" disabled/>
            </picker>
          </view>
        </view>
      </view>
      <view class="input-wrap mobile">
        <p>实验产品<em> (必填)</em></p>
        <view >
          <view class="times-picker">
            <picker mode="selector" bindchange="changeClassify" range="{{testAry2[formData.classify]}}">
              <input  placeholder='请选择' value="{{testAry2[formData.classify][formData.classify2]}}" disabled/>
            </picker>
          </view>
        </view>
      </view>
      <view class="input-wrap name">
        <p>实验目的<em class='blue'> (必填)</em></p>
        <input placeholder-style="color: #ccc" bindblur="getpurpose" bindconfirm="getpurpose" value="{{formData.purpose ? formData.purpose : ''}}" />
      </view>
      <view class="input-wrap mobile">
        <p>实验起始日期<em> (必填)</em></p>
        <view class='smallview'>
          <view class="times-picker small">
            <picker mode="multiSelector" bindchange="bindStartChange" bindcolumnchange="bindMultiPickerColumnChange" value="{{multiIndex}}" range="{{multiArray}}">
              <input placeholder='开始时间' value="{{formData.startDate ? formData.startDate : ''}}" disabled/>
            </picker>
          </view>

          <view class="times-picker small" style="margin-left:10rpx;">
            <picker mode="multiSelector" bindchange="bindEndChange" bindcolumnchange="bindMultiPickerColumnChange" value="{{multiIndex}}" range="{{multiArray}}">
              <input placeholder='结束时间' value="{{formData.endDate ? formData.endDate : ''}}" disabled/>
            </picker>
          </view>
          <!-- <reportendtimescomp class='small'></reportendtimescomp> -->
        </view>
      </view>
      <view class="input-wrap mobile">
        <p>产品类型<em> (必填)</em></p>
        <view >
          <view class="times-picker">
            <picker mode="selector" bindchange="changetestAry" range="{{testAry}}">
              <input placeholder='请选择' value="{{testAry[formData.classify2]}}" disabled/>
            </picker>
          </view>
        </view>
      </view>
      <view class="input-wrap name">
        <p>对标产品<em class='blue'> (必填)</em></p>
        <input placeholder-style="color: #ccc" bindblur="getcompareProduct" type='tel' bindconfirm="getcompareProduct" value="{{formData.compareProduct ? formData.compareProduct : ''}}" />
      </view>
      <view class="input-wrap name">
        <p>作物名称<em> (必填)</em></p>
        <!-- <view>
          <view class="times-picker" style='position:relative;color:#fff'>
            <input style='width: 151rpx;' value="{{address}}"/>
            <button class="save-btn" 
            style='width: 200rpx;position: absolute;right: 0;top: 0;margin-top: 0;height: 70rpx;line-height: 70rpx;' 
            @tap="addFun">新增</button>
          </view>
        </view> -->
      
      </view>
      <view  class="input-wrap name goods"  style="position:relative">
        <p>名称</p>
        <picker  style='width: 120rpx;margin:0 10rpx;' bindchange="getGoods" range="{{one}}">
          <view wx:if="{{formData.goods1}}"  class="picker">
            {{formData.goods1}}
          </view>
          <view wx:else class="picker"style="color:#999">
            请选择
          </view>
        </picker>
        <!-- <input style='width: 80rpx;' bindblur="getGoods" bindconfirm="getGoods"   data-index="{{idx}}" value="{{item.cropsCategory}}"/> -->
          <!-- <button class="save-btn" 
          style='width: 200rpx;position: absolute;right: 0;top: 0;margin-top: 0;height: 70rpx;line-height: 70rpx;' 
        @tap="addFun">新增</button> -->
        
        <picker  style='width: 120rpx;margin:0 10rpx;' bindchange="getGoods2" value="{{formData.goodsindex1}}" range="{{goodsAry}}">
          <view class="picker" wx:if="{{formData.goods2}}">
            {{formData.goods2}}
          </view>
          <view class="picker"  wx:else style="color:#999">
            请选择
          </view>
        </picker>
        <p style="margin-left:5px;">面积</p>
        <input type='digit' style='width:70rpx;' bindblur="getarea" bindconfirm="getarea"  value="{{formData.area}}"/> <p>亩</p>
        <!-- <button class="save-btn1 save-btn" 
          style='width: 106rpx;position: absolute;;right: 20rpx;top: 0;margin-top: 40rpx;height: 70rpx;line-height: 70rpx;' 
        >删除</button> -->
      
      </view>
      <view class="input-wrap name">
        <p>地址位置<em> (必填)</em></p>
        <view >
          <view class="times-picker" style='position:relative'>
            <picker  mode="region" style='width:400rpx' value='{{address}}' bindchange="bindRegionChange">
              <input placeholder='请选择' style='width: 431rpx;' value="{{address}}" disabled/>
            </picker>
            <button class="save-btn" 
            style='width: 200rpx;position: absolute;right: 0;top: 0;margin-top: 0;height: 70rpx;line-height: 70rpx;' 
            @tap="chooseLocation">选择位置</button>
          </view>
        </view>
      </view>
      <view class="input-wrap name">
        <p>备注信息<em> (选填)</em></p>
        <textarea  placeholder-style="color: #ccc"  bindblur="getRemark" bindconfirm="getRemark" value="{{formData.remark ? formData.remark : ''}}" />
      </view>
      <view class="input-wrap name">
        <p>实验结论<em> (选填)</em></p>
        <textarea  placeholder-style="color: #ccc"  bindblur="getResult" bindconfirm="getResult" value="{{formData.result ? formData.result : ''}}" />
      </view>
      <button class="save-btn" @tap="save">{{formData.id || formData.id === 0 ? '编辑' : '提交'}}</button>
      <button wx:if="{{formData.id || formData.id === 0}}" class="save-btn del" @tap="delFun">刪除</button>
      </view>
    </view>
  <!--保存-->
 

</template>


<script>
  import wepy from 'wepy';
  import PageMixin from '../mixins/page';
  export default class CreateTest extends wepy.page {
    mixins = [PageMixin];
    config = {
      navigationBarTitleText: '创建实验',
      navigationBarBackgroundColor: '#fff'
    };
    data = {
      showToast: false,
      error: '',
      one: [
        "柑橘",
        "水稻",
        "小麦",
        "玉米",
        "马铃薯",
        "棉花",
        "大豆",
        "花生",
        "果蔬类",
        "苹果",
        "其他作物"
      ],
      two: [
        ["柑类", "橘类", "杂柑类", "橙类", "柚类", "柠檬"],
        ["旱直播稻", "水直播稻", "人工抛秧", "机械插秧"],
        ["春小麦", "冬小麦"],
        ["夏玉米", "春玉米"],
        ["春季薯", "夏季薯", "冬季薯"],
        [
          "新陆早系列",
          "新陆中系列",
          "中字号棉花品种",
          "鲁棉系列品种",
          "冀棉系列品种"
        ],
        ["春大豆", "夏大豆"],
        ["春花生", "夏花生"],
        [
          "番茄",
          "辣椒",
          "辣椒",
          "甜椒",
          "茄子",
          "黄瓜",
          "豇豆",
          "菜豆",
          "甘蓝",
          "冬瓜",
          "南瓜",
          "甜瓜",
          "西瓜",
          "葱",
          "姜",
          "蒜"
        ],
        ["早熟品种", "中熟品种", "晚熟品种"],
        [
          "梨树",
          "桃树",
          "荔枝",
          "樱桃",
          "芒果",
          "花卉",
          "油菜",
          "茶叶",
          "葡萄",
          "烟草"
        ]
      ],
      classifyAry: [
        '探究型',
        '验证型'
      ],
      testAry: [
      '除草剂',
      '杀虫/螨剂',
      '杀菌剂',
      '植物营养',
      '种衣剂',
      '助剂及植物生长调节剂'
      ],
      testAry2: [[
        '爱可',
        '施立笑',
        '靓友',
        '奇露',
        '加倍利' 
        '百达通',
        '劲福玛',
        '薯跃',
        '冠菌乐',
        '品治佳',
        '新锰生',
        '菌思奇',
        '菌思净',
        '菌思福',
        '佳思翠',
        '佳思健',
        '佳思泽',
        '稻跃',
        '金福灵',
        '快适',
        '锐扑',
        '双工福玛',
        '施得益',
        '易可得',
        '百保魁',
        '欧得',
        '喜靠它',
        '苯·丙',
        '多·福',
        '腈菌唑',
        '禾芗',
        '农友',
        '甲硫' 
      ], [
        '宝卓',
        '布加迪',
        '双工9080',
        '拓普万',
        '墨菊',
        '蟾功',
        '唯勒',
        '农拜立',
        '幽菊',
        '好菊',
        '10%联苯菊酯',
        '农地喜',
        '350g/L吡虫啉',
        '10%、25%吡虫啉',
        '青脉',
        '70%啶虫脒/吡虫啉',
        '5%氟啶脲',
        '禾蕴达',
        '利马斯',
        '农快豹',
        '满克拉',
        '15%哒螨灵',
        '施马净',
        '佳佳迈',
        '涂迪',
        '立翘',
        '卫谷'
      ], [
        '农达',
        '拓垦/巨镰',
        '优士/稼镰',
        '马歇特',
        '新马歇特',
        '罗地欧',
        '禾耐斯',
        '拉索',
        '草逸剑/草末新',
        '香乐',
        '乡闲',
        '34.5%吡嘧·二氯喹',
        '农夸',
        '金地洁',
        '玉将/地洁',
        '豆草特',
        '高倍特',
        '莎趾静',
        '双卓',
        '阔旺',
        '苗星',
        '灭草松',
        '优士',
        '黄及光/大迈',
        '稻田旺',
        '草越',
        '墨狄',
        '封厉',
        '得利安',
        '得利安（套装）',
        '欢瑞',
        '玉三金'
      ], [
        '腾收',
        '思坦得',
        '优帅',
        '葆征',
        '爱米乐',
        '奥佳乐',
        '适立莠',
        '金达',
        '拌拌乐',
        '瑞度',
        '全蚀净',
        '巧适',
        '高扑'
      ], [
        '邦笑地励',
        '邦笑庄秀',
        '邦笑生物有机肥',
        '致发牡蛎钙',
        '邦笑土壤调理剂',
        '邦笑膨红',
        '邦笑丰露',
        '妥利美（Root）',
        '妥利美（Mix）',
        '邦笑地秀',
        '金膨红',
        '施亦康',
        '浩秀丰',
        '浩秀万促',
        '浩秀益促',
        '浩秀根',
        '浩秀皓根',
        '秀威芸优',
        '秀威芸俏',
        '秀威钙镁',
        '施加收（高氮）',
        '施加收（高磷）',
        '施加收（高钾）',
        '施加收（平衡）',
        '施加收磷钾',
        '欧迈斯锌',
        '秀威锌',
        '欧迈斯硼',
        '秀威硼',
        '秀威钙',
        '欧迈斯钙',
      ], [
        '芸嘉/芸露',
        '斯迈威',
        '浩卓',
        '喷安'
      ]]
      goodsAry: [],
      type: null,
      formData: {},
      date: '2016-09-01',
      times: '2020-07-29 12:50',
      // 时间选择器参数
      years: [],
      months: [],
      days: [],
      hours: [],
      minutes: [],
      second: [],
      multiArray: [], // 选择范围
      multiIndex: [0, 9, 16, 13, 17], // 选中值数组
      choose_year: '',
      yearIndex: 0,
      id: null,
      address: []
    };
    // 差一位补位
    timesFun (t) {
      if (t < 10) return '0' + t
      else return t
    }
    isPhone(str) {
      const reg = /^[1][3,4,5,7,8][0-9]{9}$/;
      return reg.test(str);
    }
    // 设置初始值
    settimesDate() {
      const date = new Date()
      let _yearIndex = 0
      // 默认设置
      console.info(this.times)
      let _defaultYear = this.times ? this.times.split('-')[0] : 0
      // 获取年
      for (let i = date.getFullYear(); i <= date.getFullYear() + 5; i++) {
        this.years.push('' + i)
        // 默认设置的年的位置
        if (_defaultYear && i === parseInt(_defaultYear)) {
          this.yearIndex = _yearIndex
          this.choose_year = _defaultYear
        }
        _yearIndex = _yearIndex + 1
      }
      // 获取月份
      for (let i = 1; i <= 12; i++) {
        if (i < 10) {
          i = '0' + i
        }
        this.months.push('' + i)
      }
      // 获取日期
      for (let i = 1; i <= 31; i++) {
        if (i < 10) {
          i = '0' + i
        }
        this.days.push('' + i)
      }
      // // 获取小时
      for (let i = 0; i < 24; i++) {
         if (i < 10) {
           i = '0' + i
         }
         this.hours.push('' + i)
       }
      // // 获取分钟
      for (let i = 0; i < 60; i++) {
        if (i < 10) {
          i = '0' + i
        }
        this.minutes.push('' + i)
      }
      // // 获取秒数
      // for (let i = 0; i < 60; i++) {
      //   if (i < 10) {
      //     i = '0' + i
      //   }
      //   this.second.push('' + i)
      // }
    }
    // 返回月份的天数
    setDays(selectYear, selectMonth) {
      let num = selectMonth
      let temp = []
      if (num === 1 || num === 3 || num === 5 || num === 7 || num === 8 || num === 10 || num === 12) {
          // 判断31天的月份
        for (let i = 1; i <= 31; i++) {
          if (i < 10) {
            i = '0' + i
          }
          temp.push('' + i)
        }
      } else if (num === 4 || num === 6 || num === 9 || num === 11) { // 判断30天的月份
        for (let i = 1; i <= 30; i++) {
          if (i < 10) {
            i = '0' + i
          }
          temp.push('' + i)
        }
      } else if (num === 2) { // 判断2月份天数
        let year = parseInt(selectYear)
        console.log(year)
        if (((year % 400 === 0) || (year % 100 !== 0)) && (year % 4 === 0)) {
          for (let i = 1; i <= 29; i++) {
            if (i < 10) {
              i = '0' + i
            }
            temp.push('' + i)
          }
        } else {
          for (let i = 1; i <= 28; i++) {
            if (i < 10) {
              i = '0' + i
            }
            temp.push('' + i)
          }
        }
      }
      return temp
    }
    // 设置默认值 格式2019-07-10 10:30
    setDefaulttimes() {
      let allDateList = this.times.split(' ')
      // 日期
      let dateList = allDateList[0].split('-')
      let month = parseInt(dateList[1]) - 1
      let day = parseInt(dateList[2]) - 1
      // 时间
      let timesList = allDateList[1].split(':')
      this.multiArray[2] = this.setDays(dateList[0], parseInt(dateList[1]))
    }
    // 获取时间日期
    PickerChange(e) {
      this.multiIndex = e.detail.value
      const index = this.multiIndex
      const year = this.multiArray[0][index[0]]
      const month = this.multiArray[1][index[1]]
      const day = this.multiArray[2][index[2]]
      this.times = year + '-' + month + '-' + day
      this.$apply()
      return this.times
    }
    toast(error) {
      this.showToast = true;
      this.error = error;
      var that = this;
      setTimeout(() => {
        that.showToast = false;
      }, 2000);
    }
    isType(ary, type) {
      for (let i = 0; i < ary.length; i++) {
        const item = ary[i]
        if (item === type) {
          return i
        }
      }
    }
    methods = {
     // 刪除
     delFun() {
       var that = this
       wx.showModal({
        title: '提示',
        content: '是否确认删除该实验?',
        success: function() {
          that.fetchDataPromise('wx/experiment/deleteExperimentApi.json', {id: that.formData.id})
          .then(function(data) {
            wx.showToast({
                title: '删除成功'
            });
            setTimeout(() => {
              wx.navigateBack({
                delta: 2
              });
              that.$apply();
            }, 1000);
          })
        }
       });
     },
     getGoods2(e) {
        let value = e.detail.value;
        this.formData.goods2 = this.goodsAry[value]
     },
     getGoods: function(e) {
      console.log(e);
      let value = e.detail.value;
      this.goodsAry = this.two[value];
      this.formData.goods1 = this.one[value]
     },
      chooseLocation () {
        var that = this
        wx.getLocation({
        type: 'wgs84',
        success (res) {
          wx.chooseLocation({
            latitude: res.latitude,
            longitude: res.longitude,
            success (rest) {
              //发送请求通过经纬度反查地址信息  
             that.fetchDataPromise('resolveLocationApi.json', {latitude:rest.latitude, longitude: rest.longitude})
            .then(function(data) {
              that.address = [data.provinceName, data.cityName, data.districtName]
              that.formData.location = data.address
              })
           }
          })
        }
       })
       
      },
      bindRegionChange (e) {
        this.address = e.detail.value
        this.formData.address = ''
      },
      changeClassify (e) {
        this.formData.classify = e.detail.value
      },
      changetestAry(e) {
        this.formData.classify2 = e.detail.value
      },
      // 监听picker的滚动事件
      bindMultiPickerColumnChange(e) {
        // 获取年份
        if (e.detail.column === 0) {
          this.choose_year = this.multiArray[e.detail.column][e.detail.value]
          console.log(this.choose_year)
        }
        // console.log('修改的列为', e.detail.column, '，值为', e.detail.value);
        // 设置月份数组
        if (e.detail.column === 1) {
          let num = parseInt(this.multiArray[e.detail.column][e.detail.value])
          this.multiArray[2] = this.setDays(this.choose_year, num)
        }

        this.multiIndex[e.detail.column] = e.detail.value
        this.$apply()
      },
      bindStartChange (e) {
        this.formData.startDate = this.PickerChange(e)
      },
      bindEndChange (e) {
        this.formData.endDate = this.PickerChange(e)
      },
      
      // 获取时间
      gettimes (times) {
        console.log(times)
      },
      showAddrChose() { //显示省市区联动选择框
        this.isShowAddressChose = !this.data.isShowAddressChose
      },
      cancel() { //取消
        this.isShowAddressChose = false;
      },
      finish() { //完成
        this.isShowAddressChose = false
      },
      getName(e) { //获得会议名称
        this.formData.name = e.detail.value;
        this.$apply()
      },
      getleader(e) {
        this.formData.leader = e.detail.value;
        this.$apply()
      },
      getmobile(e) {
        this.formData.mobile = e.detail.value;
        this.$apply()
      },
      getpurpose(e) {
        this.formData.purpose = e.detail.value;
        this.$apply()
      },
      getcompareProduct(e) { //获得全部内容
        this.formData.compareProduct = e.detail.value;
        this.$apply()
      },
      getRemark(e) {
        this.formData.remark = e.detail.value;
        this.$apply()
      },
      getproductName(e) {
        this.formData.productName = e.detail.value;
        this.$apply()
      },
      getarea(e) {
        this.formData.area = e.detail.value;
        this.$apply()
      },
      getResult(e) {
        this.formData.result = e.detail.value;
        this.$apply()
      },
      save() { //保存
        var self = this;
        console.log(this.formData)
        if (!self.formData.name || self.formData.name == '') {
          wx.showModal({
            title: '提示',
            content: '实验名称必填',
            showCancel: false
          });
          return;
        } else if (!self.formData.leader || self.formData.leader == '') {
          wx.showModal({
            title: '提示',
            content: '负责人必填',
            showCancel: false
          });
          return;
        } else if (!self.formData.mobile || self.formData.mobile == '') {
          wx.showModal({
            title: '提示',
            content: '手机号必填',
            showCancel: false
          });
          return;
        }  else if (this.isPhone(this.formData.mobile) === false) {
            wx.showModal({
              title: "提示",
              content: "手机号格式不正确",
              showCancel: false
            });
        } else if (!self.formData.purpose || self.formData.purpose == '') {
          wx.showModal({
            title: '提示',
            content: '实验目标必填',
            showCancel: false
          });
          return;
        } else if (!self.formData.classify || self.formData.classify == '') {
          wx.showModal({
            title: '提示',
            content: '实验类型必填',
            showCancel: false
          });
          return;
        } else if (!self.formData.startDate || self.formData.startDate == '') {
          wx.showModal({
            title: '提示',
            content: '实验起始日期必填',
            showCancel: false
          });
          return;
        } else if (!self.formData.endDate || self.formData.endDate == '') {
          wx.showModal({
            title: '提示',
            content: '实验起始日期必填',
            showCancel: false
          });
          return;
        }  else if (new Date(self.formData.endDate) < new Date(self.formData.startDate)) {
          wx.showModal({
            title: '提示',
            content: '实验起始日期不能大于结束时期',
            showCancel: false
          });
          return;
        }  else if (!self.formData.classify2 || self.formData.classify2 == '') {
          wx.showModal({
            title: '提示',
            content: '产品类型必填',
            showCancel: false
          });
          return;
        } else if (!self.formData.compareProduct || self.formData.compareProduct == '') {
          wx.showModal({
            title: '提示',
            content: '对标产品必填',
            showCancel: false
          });
          return;
        } else if (!self.formData.location || self.formData.location == '') {
          wx.showModal({
            title: '提示',
            content: '实验位置必填',
            showCancel: false
          });
          return;
        } else if (!self.formData.area || self.formData.area == '') {
          wx.showModal({
            title: '提示',
            content: '实验面积必填',
            showCancel: false
          });
          return;
        } else if (!self.formData.goods1 || self.formData.goods1 == '' || !self.formData.goods2 || self.formData.goods2 == '') {
          wx.showModal({
            title: '提示',
            content: '产品名称必填',
            showCancel: false
          });
          return;
        }
        this.formData.type = this.classifyAry[this.formData.classify]
        this.formData.productType = this.testAry[this.formData.classify2]
        this.formData.productName = this.formData.goods1 + ',' + this.formData.goods2
        //  this.formData.provinceName = this.address[0]
        //  this.formData.cityName = this.address[1]
        //  this.formData.districtName = this.address[2]
        if (self.formData.id || self.formData.id === 0) {
           this.formData.user = null
          this.fetchDataPromise('wx/experiment/updateExperimentApi.json', this.formData)
            .then(function(data) {
              self.formData = {}
              //返回上上一页
              wx.showToast({
                title: '編輯成功'
              });
              setTimeout(() => {
                wx.navigateBack({
                  delta: 1
                });
                self.$apply();
              }, 1000);
            })
        }
        else {
          this.fetchDataPromise('wx/experiment/createExperimentApi.json', this.formData)
          .then(function(data) {
            self.formData = {}
            //返回上一页
             wx.showToast({
                title: '新增成功'
             });
            setTimeout(() => {
              wx.navigateBack({
                delta: 1
              });
              self.$apply();
            }, 1000);
          })
        }
      },
    }
    // endFun () {
    //   if (this.formData.endDate1) this.times = this.formData.endDate1
    // }
    // startDate () {
    //   if (this.formData.startDate1) this.times = this.formData.startDate1
    // }
    onLoad(options) {
      // 获取经纬度
      var that = this
      if (options.item) {
        this.formData = JSON.parse(options.item)
        wx.setNavigationBarTitle({
          title: '编辑实验' 
        })
        if (that.formData.startDate) that.formData.startDate = that.formData.startDate.split('T')[0]
        if (that.formData.endDate) that.formData.endDate = that.formData.endDate.split('T')[0]
        that.formData.classify = that.isType(that.classifyAry, that.formData.type) + ''
        that.formData.classify2 = that.isType(that.testAry, that.formData.productType) + ''
        this.formData.goods1 = that.formData.productName.split(',')[0]
        this.formData.goods2 = that.formData.productName.split(',')[1]
        console.log(this.formData.goodsindex1)
      }
      wx.getLocation({
        type: 'gcj02',
        success: function (res) {
          console.log(res)
          
          that.formData.latitude = res.latitude
          that.formData.longitude = res.longitude
        },
        fail: function (res) {
          console.log(res);
        }
      })
      this.settimesDate()
      this.multiArray = [this.years, this.months, this.days]
      this.choose_year = this.multiArray[0][0]
      if (!this.times) {
        // 默认显示当前日期
        let date = new Date()
        let currentMonth = date.getMonth()
        let currentDay = date.getDate() - 1
        // console.info('月', date.getMonth())
        // console.info('日', date.getDate())
        this.multiArray[2] = this.setDays(this.choose_year, currentMonth + 1)
        this.multiIndex = [0, currentMonth, currentDay, 10, 0]
      } else {
        this.setDefaulttimes()
      }
      // wx.getStorage({
      //   key: 'item',
      //   success (res) {
      //     console.log(res.data)
      //     self.formData = res.data
      //   }
      // })

      this.$apply()
    }
    whenAppReadyShow() {
      // 每次都刷新
      this.$apply()
    }
  }
</script>
